name: Release

on:
  workflow_dispatch:
    inputs:
      draft:
        description: "Create a draft release"
        type: boolean
        default: false
      prerelease:
        description: "Mark as prerelease"
        type: boolean
        default: false

permissions: write-all

jobs:
  setup:
    uses: ./.github/workflows/base-setup.yml

  release:
    needs: setup
    runs-on: ubuntu-latest
    env:
      HOMEBREW_NO_INSTALL_FROM_API: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v3
        with:
          path: /opt/homebrew/Library/Homebrew/vendor/bundle/ruby/
          key: ${{ runner.os }}-rubygems-${{ needs.setup.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install dependencies
        run: |
          # Only install if needed for the release process
          if [ -f "Brewfile" ]; then
            echo "Installing dependencies from Brewfile in $(pwd)... (using cache if available)"
            brew bundle
          fi

      - name: Set up environment
        run: |
          mkdir -p dist

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep -E '^MINIDOCS_VERSION=' .env | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Prepare release files
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          # Copy only the minidocs script and README.md to the dist directory
          cp minidocs dist/
          cp README.md dist/
          # Make sure the script is executable
          chmod +x dist/minidocs
          # Create a zip archive with just these files
          cd dist
          zip "minidocs-$VERSION.zip" minidocs README.md

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          # Extract changes since the last release
          PREV_TAG=$(git describe --tags --abbrev=0 "v$VERSION^" \
            2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "Changes since $PREV_TAG:" > dist/changelog.md
            git log --pretty=format:"* %s (%h)" "$PREV_TAG..HEAD" >> \
              dist/changelog.md
          else
            echo "Initial release v$VERSION" > dist/changelog.md
            git log --pretty=format:"* %s (%h)" >> dist/changelog.md
          fi

          cat dist/changelog.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.version.outputs.VERSION }}"
          release_name: "Release v${{ steps.version.outputs.VERSION }}"
          body_path: "dist/changelog.md"
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload ZIP Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/minidocs-${{ steps.version.outputs.VERSION }}.zip
          asset_name: minidocs-${{ steps.version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Minidocs Script Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/minidocs
          asset_name: minidocs
          asset_content_type: application/octet-stream

      - name: Upload README Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/README.md
          asset_name: README.md
          asset_content_type: text/markdown
