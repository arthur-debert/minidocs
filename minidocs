#!/usr/bin/env zsh
# shellcheck shell=bash
#
# Minidocs bundler - an ultra lightweight documentation generator.
#
# This script combines multiple text files into a single document with
# formatted headers and optional line numbering. It can process files
# provided as arguments or automatically find .txt and .md files in the
# current directory.
#
# Usage: minidocs [options] [file1.txt file2.txt ...]
#   Options:
#     -v, --verbose  Enable verbose output
#     -n             Enable per-file line numbering (01, 02, etc.)
#     -nn            Enable global line numbering (001, 002, etc.)
#     --toc          Include a table of contents at the beginning
#     -h, --help     Show this help message
#
# Between files, a separator line is inserted with the format:
# ########################## File Name  #########################################
# The script will error out if no files are found to bundle.
#
set -e

# Constants
readonly SEPARATOR_LENGTH=80
readonly VERSION="1.1.0"
VERBOSE=false
declare -a FILES_TO_BUNDLE # Final list of files to include after expansion
# Determine if script is being executed directly or sourced
IS_EXECUTED_DIRECTLY=false
[[ "${ZSH_EVAL_CONTEXT:-}" != *:file:* ]] && IS_EXECUTED_DIRECTLY=true

#######################################
# Log function to handle verbose output
# Globals:
#   VERBOSE -> keep this global, always
# Arguments:
#   Message to log
#######################################
log() {
	if $VERBOSE; then
		echo "INFO: $1" >&2
	fi
}

#######################################
# Function to create a title header with centered filename
# Globals:
#   None
# Arguments:
#   filename - The name of the file to create a header for
#   separator_length - The total length of the separator line
# Outputs:
#   Writes the formatted header to stdout
#######################################
create_title_header() {
	local filename
	filename="$1"
	local separator_length="$2"

	log "Calculating padding for filename: '$filename' with length ${#filename}" >&2
	# Calculate padding for centered filename
	local padding=$(((separator_length - ${#filename} - 2) / 2))
	local left_padding=$padding
	local right_padding=$padding
	log "Initial padding calculation: left=$left_padding, right=$right_padding"
	# Adjust for odd lengths
	if (((separator_length - ${#filename} - 2) % 2 != 0)); then
		right_padding=$((right_padding + 1))
	fi

	# Create the separator line with filename
	printf '%*s%s%*s\n' "$left_padding" "#" "$filename" "$right_padding" "########################################################################" | cut -c1-"$separator_length"
}

#######################################
# Print a line with appropriate line numbering format
# Globals:
#   None
# Arguments:
#   line - The content line to print
#   file_num - The current file line number
#   global_num - The current global line number
#   line_num_choice - Numbering mode (0=none, 1=file, 2=global)
# Outputs:
#   Formatted line with appropriate numbering
#######################################
print_line() {
	local line="$1"
	local file_num="$2"
	local global_num="$3"
	local line_num_choice="$4" # 0: no numbering, 1: file numbering, 2: global numbering

	case "$line_num_choice" in
	0) # No line numbering
		printf "%s\n" "$line"
		;;
	1) # File line numbering
		printf "%02d | %s\n" "$file_num" "$line"
		;;
	2) # Global line numbering
		printf "%03d | %s\n" "$global_num" "$line"
		;;
	esac
}

#######################################
# Show help information
# Globals:
#   None
# Arguments:
#   version - The version of the script
# Outputs:
#   Help text to stdout
#######################################
show_help() {
	local version="$1"
	cat <<EOF
Minidocs v${version} - Lightweight documentation generator

Usage: minidocs [options] [file1.txt file2.txt ...]

Options:
  -v, --verbose  Enable verbose output
  -n             Enable per-file line numbering (01, 02, etc.)
  -nn            Enable global line numbering (001, 002, etc.)
  --toc          Include a table of contents at the beginning
  -h, --help     Show this help message

Examples:
  minidocs -n intro.txt chapter1.txt           # Bundle with per-file numbering
  minidocs -nn --toc                           # Bundle all files with TOC and global numbers
  minidocs --toc -v                            # Verbose bundle with table of contents
EOF
}

#######################################
# Read list of files from a file
# Globals:
#   FILES_TO_BUNDLE - Set to the list of files found in the file
# Arguments:
#   file_list - Path to file containing list of files
# Returns:
#   0 if at least one file was found and readable, 1 otherwise
#######################################
read_file_list() {
	local file_list="$1"
	local -i found_files=0
	local has_errors=false
	local -a files=()

	log "Starting read_file_list function with file_list: $file_list"

	# Read each line from the file
	while IFS= read -r line || [[ -n "$line" ]]; do
		# Skip empty lines and comments
		[[ -z "$line" || "$line" == \#* ]] && continue

		# Trim whitespace
		line="${line#"${line%%[![:space:]]*}"}"
		line="${line%"${line##*[![:space:]]}"}"
		log "Processing line from file list: '$line'"

		# Check if file exists and is readable
		if [[ -f "$line" && -r "$line" ]]; then
			log "File exists and is readable, adding to bundle list: $line"
			files+=("$line")
			((found_files++))
		else
			echo "Error: Cannot read file from list: $line" >&2
			has_errors=true
		fi
	done <"$file_list"

	if [[ $found_files -eq 0 ]]; then
		echo "Error: No valid files found in list file: $file_list. Exiting." >&2
		return 1
	fi

	# Set the global FILES_TO_BUNDLE variable with the expanded file list
	FILES_TO_BUNDLE+=("${files[@]}")
	log "Found $found_files files in list"
	return 0
}

#######################################
# Parse command line arguments and return parsed options
# This function does not modify global variables
# Instead, it returns a data structure with all parsed options
# Globals:
#   PARSE_RESULT_VERBOSE - Set to true if -v or --verbose is provided
#   PARSE_RESULT_LINE_NUMBER_MODE - Set based on line numbering options
#   PARSE_RESULT_INCLUDE_TOC - Set to true if --toc is provided
#   PARSE_RESULT_USER_SRCS - Array of file paths requested by the user
# Arguments:
#   Command line arguments ($@)
# Returns:
#   Sets global variables with PARSE_RESULT_ prefix that contain the parsed options:
#   - PARSE_RESULT_USER_SRCS contains the array of file arguments
#   - Other PARSE_RESULT_ variables contain the parsed options
#######################################
parse_args() {
	local verbose=false
	local line_number_mode=0
	local include_toc=false
	local -a user_srcs=()

	local -a file_args=()

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-v | --verbose)
			verbose=true
			shift
			;;
		-nn)
			line_number_mode=2
			# Can't use log here as verbose might not be set yet
			shift
			;;
		-n)
			line_number_mode=1
			# Can't use log here as verbose might not be set yet
			shift
			;;
		--toc)
			include_toc=true
			# Can't use log here as verbose might not be set yet
			shift
			;;
		-h | --help)
			show_help "$VERSION"
			exit 0
			;;
		-*)
			echo "Unknown option: $1" >&2
			echo "Use -h or --help for usage information" >&2
			exit 1
			;;
		*)
			# Save file arguments to process after all options
			file_args+=("$1")
			shift
			;;
		esac
	done

	# Return all parsed options as a data structure
	# In zsh, we can return multiple values by setting variables with specific names
	# that the caller can access
	typeset -g PARSE_RESULT_VERBOSE=$verbose
	typeset -g PARSE_RESULT_LINE_NUMBER_MODE=$line_number_mode
	typeset -g PARSE_RESULT_INCLUDE_TOC=$include_toc

	# Return the file arguments
	user_srcs=("${file_args[@]}")
	typeset -ga PARSE_RESULT_USER_SRCS
	PARSE_RESULT_USER_SRCS=("${user_srcs[@]}")
}

#######################################
# Expand a single argument into file paths
# This function processes one argument and returns the expanded file paths
# Globals:
#   None
# Arguments:
#   arg - The argument to expand (file, directory, or bundle)
# Returns:
#   0 if expansion was successful, 1 otherwise
#   Sets FILES_TO_BUNDLE with the expanded file paths
#######################################
expand_argument() {
	local arg="$1"
	local -i found_files=0
	local has_errors=false

	log "Expanding argument: $arg"

	# Check if argument is a directory
	if [[ -d "$arg" ]]; then
		log "Argument is a directory, expanding: $arg"
		local dir_path="$(realpath "$arg")/"

		# Find all .txt and .md files in the directory
		local -a dir_files=()
		while IFS= read -r -d $'\0' file; do
			log "File found in directory: $file"
			# Skip the script itself
			if [[ "$file" == "$0" ]]; then
				continue
			fi
			dir_files+=("$file")
			((found_files++))
		done < <(find "$dir_path" -type f \( -name "*.txt" -o -name "*.md" \) -print0)

		if [[ ${#dir_files[@]} -eq 0 ]]; then
			echo "Error: No .txt or .md files found in directory: $arg" >&2
			has_errors=true
		else
			FILES_TO_BUNDLE+=("${dir_files[@]}")
			log "Added ${#dir_files[@]} files from directory: $arg"
		fi
	# Check if argument is a bundle file (.bundle or .bundle.txt extension)
	elif [[ -f "$arg" && ("$arg" == *.bundle || "$arg" == *.bundle.txt) ]]; then
		log "Argument is a bundle file, processing: $arg"
		if ! read_file_list "$arg"; then
			echo "Error: Failed to process bundle file: $arg" >&2
			has_errors=true
		else
			log "Successfully processed bundle file: $arg"
		fi
	# Regular file
	elif [[ -f "$arg" ]]; then
		log "Argument is a regular file, adding: $arg"
		FILES_TO_BUNDLE+=("$arg")
		((found_files++))
	else
		echo "Error: File or directory not found: $arg" >&2
		has_errors=true
	fi

	[[ "$has_errors" == "true" && $found_files -eq 0 ]] && return 1 || return 0
}

#######################################
# Find files to bundle based on various input methods
# This function processes user requested sources and determines
# the actual files to include in the bundle
# Globals:
#   FILES_TO_BUNDLE - Set to the final list of files to include
# Arguments:
#   src_dir - Directory to search in
#   file_args - Array of file arguments passed to the script
# Returns:
#   0 if files were found, 1 otherwise
#######################################
get_files() {
	local src_dir="$1"
	shift
	local -a file_args=("$@")
	# Reset the global array
	FILES_TO_BUNDLE=()

	log "Starting get_files function with src_dir: $src_dir and ${#file_args[@]} file arguments"
	log "Processing user requested sources: ${file_args[*]}"

	# If no arguments provided, search current directory
	if [[ ${#file_args[@]} -eq 0 ]]; then
		log "No file arguments provided, searching current directory"
		expand_argument "$src_dir" || return 1
		return 0
	fi

	# Process each argument
	local -i success_count=0
	local has_errors=false

	for file in "${file_args[@]}"; do
		if expand_argument "$file"; then
			((success_count++))
		else
			has_errors=true
		fi
	done

	if [[ $success_count -eq 0 ]]; then
		echo "Error: No valid files found from any of the arguments. Exiting." >&2
		return 1
	fi

	log "Final FILES_TO_BUNDLE has ${#FILES_TO_BUNDLE[@]} files"
	return 0
}

#######################################
# Find files to bundle if none were specified
# Finds all .txt and .md files in the specified directory
# Globals:
#   FILES_TO_BUNDLE - Set to the list of files found
# Arguments:
#   script_dir - Directory to search in
#######################################
# Note: This function has been replaced by expand_argument

#######################################
# Generate table of contents
# Globals:
#   None
# Arguments:
#   files_to_bundle - Array of files to list in TOC
#   separator_length - Length of separator lines
#   line_number_mode - Determines if line numbers are shown
# Outputs:
#   Table of contents to stdout
#######################################
generate_toc() {
	local count=0
	local filename

	local separator_length="$1"
	shift
	local -a files_to_bundle=("$@")

	log "Starting generate_toc with ${#files_to_bundle[@]} files"

	# Print TOC header
	create_title_header "TABLE OF CONTENTS" "$separator_length"
	echo ""

	# Check if files_to_bundle is empty
	if [[ ${#files_to_bundle[@]} -eq 0 ]]; then
		echo "Error: No files to include in table of contents" >&2
		return 1
	fi

	# Generate TOC entries
	for file in "${files_to_bundle[@]}"; do
		count=$((count + 1))
		filename=$(basename "$file")
		log "TOC entry $count: $filename (from $file)"
		printf "%02d. %s\n" "$count" "$filename"
	done

	log "TOC generation completed with $count entries"
	echo ""

	log "TOC generation complete"
}

#######################################
# Process all files and output bundled content
# Globals:
#   None
# Arguments:
#   include_toc - Whether to include table of contents
#   line_number_mode - Line numbering preference
#   separator_length - Length of separator lines
#   files_to_bundle - Array of files to process
# Outputs:
#   Bundled content to stdout
#######################################
process_all() {
	local global_line_num=1
	local file_line_num=1
	log "Starting process_all with ${#@} arguments"
	local include_toc="$1"
	shift
	local line_number_mode="$1"
	shift
	local separator_length="$1"
	shift
	local -a files_to_bundle=("$@")

	# Generate TOC if requested
	if $include_toc; then
		log "Table of contents is enabled, generating TOC for ${#files_to_bundle[@]} files"
		log "Generating table of contents"
		generate_toc "$separator_length" "${files_to_bundle[@]}"
	fi

	# Process files and stream directly to stdout
	log "Processing files and streaming to stdout"
	for file in "${files_to_bundle[@]}"; do
		log "Processing file in loop: $file"
		# Process the file and update global line number
		if ! process_file "$file" "$global_line_num" "$line_number_mode" "$separator_length"; then
			log "Error processing file: $file"
			exit 1
		fi

		# Only update the global line number if the file is a regular file
		if [[ -f "$file" ]]; then
			global_line_num=$((global_line_num + $(wc -l <"$file")))
		else
			# Skip line counting for directories or non-existent files
			log "Skipping line counting for non-file: $file"
		fi
		log "Updated global line number after processing file: $global_line_num"
	done

	log "Bundle process complete, processed ${#files_to_bundle[@]} files"
	log "Successfully bundled ${#files_to_bundle[@]} files to stdout"
}

#######################################
# Process a single file and output its content
# Globals:
#   None
#   SEPARATOR_LENGTH - Length of separator lines
# Arguments:
#   file - The file to process
#   global_line_num - Current global line number
#   line_number_mode - Line numbering mode
# Returns:
#   Updated global line number
# Outputs:
#   Processed file content to stdout
#######################################
process_file() {
	local file="$1"
	local global_line_num="$2"
	log "Starting process_file for file: $file, global line number: $global_line_num"
	local line_number_mode="$3"
	local separator_length="$4"
	local file_line_num=1

	# Check if file is still accessible
	if [[ -d "$file" ]]; then
		echo "Error: Cannot read directory $file as a file. Exiting." >&2
		log "File $file is a directory, skipping"
		# Return the current global line number without incrementing
		echo "$global_line_num"
		return 1
	elif [[ ! -r "$file" ]]; then
		echo "Error: Cannot read file $file. Exiting." >&2
		log "File $file is not readable, skipping"
		echo "$global_line_num"
		return 1
	fi
	filename=$(basename "$file")
	log "Processing file: $filename"
	log "File path: $file"

	# Create title header
	log "Creating separator for: '$filename'"
	separator=$(create_title_header "$filename" "$separator_length")
	log "Final separator: '$separator'"

	# Print the separator (without line numbering)
	echo "$separator"

	# Process and print each line of the file with appropriate line numbering
	log "Processing file content with line numbering mode: $line_number_mode"
	while IFS= read -r line || [[ -n "$line" ]]; do # Handle files without final newline
		log "Processing line $file_line_num (global $global_line_num): ${line:0:50}"
		print_line "$line" "$file_line_num" "$global_line_num" "$line_number_mode"
		((file_line_num++))
		((global_line_num++))
		log "Updated line numbers: file=$file_line_num, global=$global_line_num"
	done <"$file"

	# Add blank line after each file
	echo ""

}

#######################################
# Main function
# Globals:
#   All script globals
# Arguments:
#   Command line arguments ($@)
#######################################
main() {
	# Parse command line arguments and get results
	parse_args "$@"

	# Get script directory more robustly
	local script_path="$0"
	if [[ "$script_path" != /* ]]; then
		# If not an absolute path, make it absolute
		script_path="$PWD/$script_path"
	fi
	# Get the directory containing the script
	local script_dir="$(dirname "$script_path")/"

	# Set VERBOSE global variable based on parsed arguments
	VERBOSE=$PARSE_RESULT_VERBOSE

	# Store other parsed arguments in local variables
	local line_number_mode=$PARSE_RESULT_LINE_NUMBER_MODE
	local include_toc=$PARSE_RESULT_INCLUDE_TOC
	local -a user_requested_srcs=("${PARSE_RESULT_USER_SRCS[@]}")

	log "In main(): user_requested_srcs count: ${#user_requested_srcs[@]}"
	log "In main(): user_requested_srcs array: [${user_requested_srcs[*]}]"

	# Now that VERBOSE is set, we can log
	if $VERBOSE; then
		local LINE_NUMBER_MODE=$line_number_mode # For backward compatibility with log messages
		log "Verbose mode enabled"
		log "Line number mode: $LINE_NUMBER_MODE"
		[ $include_toc = true ] && log "Table of contents enabled"
	fi

	log "Initialization complete"
	log "Script directory: $script_dir"
	log "User requested sources: ${user_requested_srcs[*]}"

	log "Before calling get_files: user_requested_srcs count: ${#user_requested_srcs[@]}"
	log "Before calling get_files: user_requested_srcs[0]: '${user_requested_srcs[0]}'"

	# Get files to bundle based on user requested sources
	if ! get_files "$script_dir" "${user_requested_srcs[@]}"; then
		echo "Error: Could not find any valid files to bundle. Exiting." >&2
		exit 1
	fi

	# Check if we have files to bundle
	if [[ ${#FILES_TO_BUNDLE[@]} -eq 0 ]]; then
		echo "Error: No files to bundle. Exiting." >&2
		exit 1
	fi

	log "Final list of files to bundle: ${FILES_TO_BUNDLE[*]}"
	# Process the files
	process_all "$include_toc" "$line_number_mode" "$SEPARATOR_LENGTH" "${FILES_TO_BUNDLE[@]}"
	return 0
}

# Execute main with all arguments
# Only run main when the script is executed directly, not when sourced
if $IS_EXECUTED_DIRECTLY; then
	# Setup error handling with traps
	trap 'echo "Error: Script terminated unexpectedly" >&2; exit 1' ERR
	trap 'echo "Received interrupt signal. Exiting..." >&2; exit 2' INT TERM
	main "$@"
fi
